{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#why-another-grocery-list-app","title":"Why another grocery list app?","text":"<p>Certainly there are other open source / self-hosted apps, but none had the main feature that I felt was missing from even the commercial offerings: really reliable sync. The key function my family needed was the ability to share lists across multiple devices and multiple users and have people add and check-off items with the results reflected in real-time on other devices. So many times, with other apps, the sync would just fail with no indication at all, or just stop working until a restart or account reset.</p> <p>Other apps, such as grocy, are great if you are interested in keeping inventory, etc. For my purposes, though, I was much more interested in sync and the overall shopping experience, such as the ability to have multiple lists with an item able to be purchased at multiple locations, but checked off all lists once it was purchased at any one store.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Supports multiple shopping lists and ability to group lists into a list group</li> <li>Lists can be shared with other users</li> <li>Updates across multiple platforms and users occur in real-time, synced immediately. Sync status always visible. Conflict resolution occurs automatically and can be viewed.</li> <li>Works offline as well, when you don't have internet connectivity. Updates are synced as soon as connectivity resumes.</li> <li>List Group support includes the ability to add items to a group of stores automatically, and then if the first store doesn't have an item, it remains on the list for the next store.</li> <li>Supports a sorted view of every store by category (aisle), so you don't have to double back in the store</li> <li>Recipe support, so that a group of items can be added to a shopping list at once. Includes support for importing existing recipes from Tandoor</li> </ul>"},{"location":"#demo","title":"Demo","text":"<p>If you'd like to take a look at the app without going through a local install, check out the demo site and login instructions at: Specifically Clementines</p>"},{"location":"#whats-with-the-name","title":"What's with the name?","text":"<p>One of my children has a very sincere and distinct preference for clementines over tangerines or any other more generic \"mandarin\".  She is always very specific when she puts clementines on the list.</p>"},{"location":"installation/alexa/","title":"Alexa Support","text":""},{"location":"installation/alexa/#introduction","title":"Introduction","text":"<p>Preliminary Alexa support has been built and an \"Alexa Server\" component is available.  There is some limited documentation below for how to set this up for a self-hosted environment, but it assumes that you are familiar in general with creating an Alexa skill.</p>"},{"location":"installation/alexa/#basic-setup","title":"Basic Setup","text":"<ul> <li>Create an Amazon skill using the \"other\" type of experience with a \"custom\" model.</li> <li>Set the hosting service to \"provision your own\".</li> <li>Set the skill up to \"start from scratch\".</li> <li>Click on interaction model -&gt; JSON editor, and drag/drop the \"interactionmodel.json\" file from the alexa/src directory, and click save.</li> <li>Under \"Invocations\" make sure you set an appropriate skill invocation name</li> <li>Go to Endpoint and set this to \"HTTPS\" and put the Alexa server component's API URL that is externally accessible, such as \"https://groceries.mydomain.tld/alexa\".  Depending on your routing setup / reverse proxy, you might need to set this up to be \"https://alexagroceries.mydomain.tld\" if you can't actually route to a URL prefix.  The \"/alexa\" is just a convention and the backend doesn't actually listen on that url, but rather on the root \"/\".</li> </ul>"},{"location":"installation/alexa/#environment-variables-for-alexa-server-process","title":"Environment Variables for Alexa Server process","text":"<p>These are a subset of the same variables used for the main authentication server and include: - COUCHDB_URL - COUCHDB_INTERNAL_URL - COUCHDB_DATABASE - COUCHDB_HMAC_KEY - COUCHDB_ADMIN_USER - COUCHDB_ADMIN_PASSWORD - LOG_LEVEL</p>"},{"location":"installation/docker-setup/","title":"Groceries App -- Docker Compose setup","text":""},{"location":"installation/docker-setup/#initial-setup","title":"Initial setup","text":"<p>The easiest way to get started is to use this file docker-simple.tar.gz which contains a working <code>docker-compose.yaml</code> file along with the associated data directories/volumes.  Extract the file to a new directory, and type <code>docker-compose up</code> and you should be working.  This is setup for single-node processing, with services running on localhost and initially only accessible via that localhost. See places in the <code>docker-compose.yaml</code> marked as \"CHANGEME\" for those you would want to change for a full production deployment.</p> <p>In order to get any Android/IOS device working, you will have to change at a minimum the COUCHDB_URL variable for the backend server to something that is resolvable and routable by your mobile device. How you do this is dependent on your own local DNS/host setup, but it could be as simple as making COUCHDB_URL your host/server machine's IP address as long as it is accessible to your mobile/client device.</p> <p>You can extrapolate from here to add reverse proxies, https/letsencrypt, etc..  A full example docker-compose file with directories that would be relatively easy to modify to work on a VPS or otherwise, including Caddy as a reverse-proxy can be found here: docker-full.tar.gz .  If you start with either of these, please change contents such as couchDB admin passwords and the HMAC key values following the instructions below so you can secure your environment. </p> <ul> <li>The docker-compose has 3 volumes setup as 2 subdirectories and 1 file:<ul> <li>File groceries-web.conf -- see file in docs directory for contents. Just sets up some defaults for nginx.</li> <li>Directory <code>./dbdata</code> -- will have the database files</li> <li>Directory <code>./dbetclocal</code> -- has configuration files for couchdb. Should start with two files called admin.ini which contains the startup user/password. See admin.ini in docs directory for contents.  Other file should be jwt.ini which you will need to update with your personal HMAC key (base64 encoded) on the line that starts with <code>hmac:_default</code>.</li> </ul> </li> <li>Launch the file with <code>docker-compose up</code>. Because it now has the <code>single_node</code> key in <code>`jwt.ini</code>, CouchDB will setup and automatically create the _users and _replicator system databases.</li> <li>There are two different ways to change the password:<ul> <li>If you are mainly doing a configuration as code type approach, first, you might want to change to bind-mounting the config files mounted to <code>/opt/couchdb/etc/local.d directory</code>, for both <code>admin.ini</code> and <code>jwt.ini</code>. If you do that, you can change the password in admin.ini. You can generate this using techniques such as those that are shown here.  Once you have the value, change the string after <code>admin=-pbkdf2-</code> in the <code>admin.ini</code> file to the value returned.</li> <li>Alternatively, login at http://localhost:5984/_utils with the user (admin/password) , go to the settings tab and change the admin password.  This will write a new password to <code>jwt.ini</code>. You can then delete the <code>admin.ini</code> file.</li> </ul> </li> <li>Regardless of which method was used, in the <code>docker-compose.yml</code> file change the groceries backend environment variable <code>COUCHDB_ADMIN_PASSWORD</code> to match.    </li> <li>Login to the couchDB web UI http://localhost:5984/_utils and validate that CORS is set correctly (it should be open). Validate that the _users and _replicator databases have been created.</li> <li>You may need to restart the services with docker compose up/down or restart to apply the password changes and HMAC key changes.</li> <li>Review all other entries in <code>docker-compose.yml</code> to match the instructions in the installation section of the documentation.</li> </ul>"},{"location":"installation/docker-setup/#create-a-user","title":"Create a user","text":"<ul> <li>Navigate to http://localhost:8100.</li> <li>Choose the \"CREATE ACCOUNT\" button.</li> <li>Enter in all relevant details. If you wish to be able to reset your password with the UI, make sure you enter a valid email and make sure you have the email setup in the environment variables for the groceries server (SMTP_*)</li> </ul>"},{"location":"installation/installation/","title":"Installation process for System Admins","text":"<ul> <li>For mobile/web access you can either:<ul> <li>Install via Docker</li> <li>Run the code on an existing web server. You will have to build the output using \"ionic build\" and then deploy to your web server.</li> </ul> </li> <li>Installation instructions for web/mobile app (docker)<ul> <li>Use the Dockerfile in client/Dockerfile to build an image to deploy.  Alternatively, use the latest version on ghcr - for instance: <code>docker pull ghcr.io/davideshay/groceries-server:1.1.2</code></li> <li>You should have a \".env\" file locally with an assignment pointing to your backend/API component. For development, this might be something like: <code>DEFAULT_API_URL=http://localhost:3333</code> For production, this might be: <code>DEFAULT_API_URL=https://groceries.mydomain.com/api</code> . (This would only be if you are able to route \"/api\" through a reverse proxy/etc. to the actual endpoint. The backend server just listens on \"/\", not on \"/api\", so to the backend, it would respond to \"/registernewuser\" and not to \"/api/registernewuser\").  If your docker or other setup is not capable of routing specific url paths like this, you would likely need to setup something like \"groceriesapi.mydomain.com\" and just point that directly to the backend server/port.</li> </ul> </li> <li>Installation instructions for Android / iOS<ul> <li>Ensure you have Ionic and Capacitor installed on your machine, per the instructions on those websites. For android, you will need the Android Studio installed, or xCode for iOS.</li> <li>In the client directory, do <code>npm install</code>.</li> <li>Sync the sources with <code>npx capacitor sync</code> or <code>ionic capacitor sync</code></li> <li>Build the application, with, for example for Android: <code>ionic capacitor build android</code></li> <li>You can test in a simulator, or move the bundle/APK to your Android device with Google Drive or any other sideloading mechanism of your choice.</li> <li>For Android, the easiest installation is to use the .APK file attached to each release on Github. The only difference from \"building your own\" is that the default API URL will not be your custom site/domain and will need to be changed. There is now also a release available on the Google Play store:  <code>https://play.google.com/store/apps/details?id=net.shaytech.groceries</code></li> </ul> </li> <li>Installation instructions for backend - Docker / Kubernetes<ul> <li>For a complete docker-compose example see the docker compose file here: docker-compose.yaml and the instructions here: Docker Setup . The simplest way to get started is to extract this tar file docker-simple.tar.gz which contains the <code>docker-compose.yaml</code> file and a set of data directories to get things started.  A more comprehensive example using reverse-proxy, suitable for use on a VPS can be found here: docker-full.tar.gz </li> <li>Deploy couchDB to a production server, and note the admin user/password (these will be needed for the node backend). For couchDB you will also have to enable JWT authentication and set an HMAC key.  See example YAML for Kubernetes deployment couchdb.yaml  .  Be sure to change any admin users, passwords, and secrets in that file as appropriate.<ul> <li>The first piece is setting the admin password in pbkdf2 format. You can use various online sites to do this, or set the password in plain text in the password.ini file and then let couchDB hash it for you automatically. You can then record the hashed value (updated in the file) and use that going forward.</li> <li>The next challenge is setting up the HMAC key. In the jwt.ini file, you need to set the HMAC key. Come up with a random key, and in this file set it to the base64 encoded value. Later, in the deployment of the groceries auth server, you will use the un-encoded/raw value of this secret key. The application server startup will make sure that these keys match and are set appropriately, and if an error exists will try to log a helpful message for what the values should be set to.</li> <li>The yaml file sets up 3 separate instances of couchdb so they can run as a cluster.  I wanted this for high-availablity of couchDB, but this is not necessary.</li> <li>The yaml file shown above also has some setup scripts that run -- these are mostly for convenience so that at first run it will automatically create the _users database and _replicator database, both of which are required for standard couchDB replication and authentication functionality to work. You could create those manually and ignore the scripts. If you are using any of these scripts be sure to change the username and password specified in them to the admin username / password specified above.</li> </ul> </li> <li>Build the image from the Dockerfile in server/Dockerfile</li> <li>Deploy to your container server.  Here is a sample yaml deployment file for Kubernetes : groceries.yaml. Make sure to change your couchDB admin user names and passwords to what you have established in the CouchDB deployment above. Also, set the HMAC key to the unencoded/raw HMAC secret linked to the one in the CouchDB setup.</li> <li>Run from your container server (docker, kubernetes, etc.) and ensure the backend is configured with the following environment variables:</li> </ul> </li> </ul> <pre><code>COUCHDB_URL : full couchDB url + port (no database reference)\nCOUCHDB_INTERNAL_URL : \"Internal\" URL - Can be used in a kubernetes environment to access the database without going through the ingress layer, but still give out the FQDN ad the COUCHDB_URL.\nCOUCHDB_DATABASE: CouchDB database name (i.e. groceries)\nCOUCHDB_HMAC_KEY: A key (plaintext) configured into your couchDB security to allow JWT keys to work. The base64 encoded version of this plaintext should match what is in your jwt.ini file in CouchDB.\nCOUCHDB_ADMIN_USER: Admin user for couchDB instance (admin)\nCOUCHDB_ADMIN_PASSWORD: Admin password for CouchDB instance\nGROCERY_URL : for testing could be http://localhost:8100, for prod could be https://groceries.mydomain.com\nGROCERY_API_URL: for testing could be http://localhost:3333, for prod could be https://groceries.mydomain.com/api  (need to ensure you can route the api prefix to the backend and without the prefix to the web server)\nGROCERY_API_PORT: Port for the server to listen on, i.e. 3333 for dev, 80 or 8000 for production, depending on your setup/reverse proxy.\nLOG_LEVEL: Defaults to \"INFO\". Can be set to \"D\", or \"DEBUG\", or \"1\" to get additional debugging output. Standard values are used here, so you can also set \"S\" or \"SILENT\" or \"5\" to have no logging output at all.\nSMTP_HOST: Name for SMTP host which can send emails (for password resets and friend requests to unregistered users)\nSMTP_PORT: Port SMTP server runs on\nSMTP_FROM: Email address that mail will appear to originate from\nSMTP_USER: User name to login to SMTP server\nSMTP_PASSWORD: Password for SMTP server\nENABLE_SCHEDULING: Used if you want automated resolution of conflicts and token expiration (highly recommended).\nRESOLVE_CONFLICTS_FREQUENCY_MINUTES: How often to resolve couchDB conflicts and turn them into conflicts which can be viewed by the frontend. Note that this uses time/date stamp of the update and chooses the more recent one. In most cases, except for multiple offline devices making updates to the same item, and then re-syncing to the central database, conflicts shouldn't occur. If they do, please submit an issue.\nEXPIRE_JWT_FREQUENCY_MINUTES: Sweep the database and expire old JWT tokens. These would not be able to be used for logins, but this is still good practice and a back-stop.\nREFRESH_TOKEN_EXPIRES: A string such as \"30d\" for 30 days, or \"24h\" for 24 hours. Can be reasonably long since re-use detection is applied.\nACCESS_TOKEN_EXPIRES: Same type of string, typically shorter as it will be renewed prior to expiration automatically by the refresh token. Could be \"1d\" or \"12h\" for example.\nDISABLE_ACCOUNT_CREATION: Set to \"true\" to disable new user account creation in the backend\n</code></pre> <pre><code>* For the frontend/client, these environment variables can also be set for web access (in Android/iOS these are set at compile/build time)\n</code></pre> <pre><code>DEFAULT_API_URL: Should be set to the same as GROCERY_API_URL above on the backend, and accessible from outside of your docker environment/kubernetes cluster ideally.\nLOG_LEVEL: Determines the level of logging in the browser's Javascript console. Normally set to \"INFO\" - see above for other details.\n</code></pre>"},{"location":"installation/key-concepts/","title":"Key Concepts for System Admins","text":"<ul> <li>There are two main components -- a frontend which, using Ionic Capacitor, can be run on the web/mobile or installed to Android or iOS devices. There is also a backend, which consists of a nodeJS application. Both frontend and backend app require access to a couchDB database. This database has a local syncing feature known as PouchDB, and enables rapid syncing as well as conflict resolution, and the ability to create an \"offline-first, sync-first\" type approach ideally suited to this application.</li> <li>If you desire web/mobile access without an app, you can build and install the code from the client directory to any webserver.</li> <li>The backend should be installed on a server with nodeJS access, and also will require couchDB to be installed.  Without a backend and couchDB being installed the application will be severely limited and will not be able to:<ul> <li>Sync / save data with the cloud</li> <li>Share lists between users</li> <li>Sync with multiple devices</li> </ul> </li> <li>Dockerfiles are available in the source for easy creation of a frontend image and a backend image. These can be run on any container environment, including Kubernetes. You can use the standard couchDB images to standup a couchDB instance.</li> <li>The backend uses JWT tokens to authenticate with the frontend (web, mobile, or apps). A refresh token is used with a fairly long refresh time as a default, so the user won't have to login again if they access within this period. Token re-use detection is active to prevent abuse. An access token is used to access CouchDB as well as the backend, and has a shorter lifespan typically (1 day by default)</li> </ul>"},{"location":"userguide/categories/","title":"Category Editor","text":"<p>You will see a list of available categories, both those that came pre-loaded with the system, as well as those that you have entered. When you click on a category here, you can edit the category.  Remember that each custom category you create is a part of the list group it was created in.</p> <p></p> <p>There are not many settings available to edit. There is a color you can assign to the category as well as editing the name. Every user is able to set the color of each category for themselves. This color will show up on the item check-off screen as a colored bar under the category name.</p> <p>If you are editing one of the pre-provided \"Global\" categories, you cannot change the name of the category, nor delete it.  When creating your own custom category, you must assign it to a list group where you want to use it. After the category is created, this list group assignment cannot be changed.</p>"},{"location":"userguide/friends/","title":"Friends Editor","text":"<p>From this screen, you will see a list of existing friends, and those in different statuses. In the example shown, for instance, you have already sent an invite to \"Friend 5\" at their GMail address, but they haven't yet registered for an account on the app. If they have misplaced their email to register, you can click on the URL button and share the URL with your friend so they can register in the app.</p> <p>If someone had requested you to be their friend, and you are both already in the app, you will see a button for you to confirm the friendship. You can only share listgroups once you have confirmed the friendship. Once confirmed, the friendship is bi-directional.</p> <p>You can also click on the \"+\" button at the bottom of the screen in order to add a new friend. You enter their email address and if the person is not yet a user, it will send them an email to register for an account. If they are already a user, they will be prompted when they login to the app to confirm the friendship. A number \"badge\" will appear next to the Friends menu item as well.</p>"},{"location":"userguide/items/","title":"Items","text":""},{"location":"userguide/items/#item-entry-checkoff-screen","title":"Item Entry / Checkoff Screen","text":"<p>This screen is really the heart of the application.  At the top of the application there is a search bar where you can search for and easily add items that are in the global pre-populated list or those that you have previously entered.  The next section allows you to \"check the item off\" the list when you have purchased it by clicking on the checkbox. If you click on the name itself, you will be taken to the item editor where you can change quantity, unit of measure, or category.</p> <p>The items are listed in order by category. These are listed in the order that the categories are arranged in the list editor.</p> <p>After all of the \"active\" items on the list, the app will show that the checked off items, as well as a button to delete or clear the completed items.</p> <p>Each category/aisle can be expanded or collapsed by clicking on the chevron to the right of that category name. In addition, each category can be assigned a color (specific to the user) which will then appear as a colored bar underneath the category name.</p> <p>The item entry screen works slightly differently depending on whether you have selected a list group in the upper right hand corner or a list. If you have selected a list group (this would be the most common way when you are adding items to the list), then every time you create a new item it is added to all of the lists in the listgroup. The main difference with choosing a list is that then you get the correct sorting by category that the store has, as defined in the list editor. You would typically use list mode when shopping for the items at the store.</p>"},{"location":"userguide/items/#searching-for-items","title":"Searching for items","text":"<p>When you first enter the search bar, a list of all available items to add to the list will appear. Items that you've purchased before will sort towards the top of the list based on number of times purchased at the store, so you can easily add the items you always buy. </p> <p>As you start typing, the list will be filtered by the letters typed in to the search bar.</p>"},{"location":"userguide/items/#item-editor","title":"Item Editor","text":"<p>The item editor allows you to change the name of the item (only if it isn't one of the pre-supplied items).  It also allows you to select the category that the item is in (which determines the sorting position in the store). You can also change the quantity and unit of measure on this screen, as well as provide a note for the item.</p> <p>A photo can also be stored to help make sure the right item for purchase can be identified.</p> <p>On this screen, if you enter a value for quantity, unit of measure, or note, they will be applied to every list that the item is on.  This is probably the \"standard\" way you would want it to work, but there are certain cases where you might want to buy 2 bunches of bananas at Publix, where they are always greener, and 1 bunch of bananas at Wegman's where they are riper.  If you want to change any of the values individually at the list level you can click on the bottom part of the screen on the pencil button by the list.  Items will be shown there highlighted if there are any differences from that item and the rest of the items.</p> <p>Here you will see this screen:</p> <p></p> <p>Here you can change the following values:</p> <ul> <li>Active -- this is the same as being \"on\" the list and available for shopping</li> <li>Completed -- the item is \"checked off\" on the list and would appear at the bottom of the item entry screen</li> <li>Stocked Here -- this is maintained so you can denote whether an item is available in a specific store. This can be useful if you want to use a list group with multiple stores, where for instance, the Publix doesn't carry Birch Beer but the Wegman's does.  When adding to a list, the app will never add to stores that don't stock the item.</li> <li>Category - an item could be in a different section of one store vs another.  For example, the Publix might carry Soy Sauce in the \"Asian\" section, but the Wegman's has it in the \"Condiments\" section.</li> <li>Quantity - you might want to buy a different quantities of the same item in different stores.</li> <li>Reset -- The number of times the item has been purchased from the store -- used in item sorting in the search bar. You can reset this if desired by clicking on the reset button.</li> <li>Note - A different note can be maintained for each store.</li> </ul>"},{"location":"userguide/key-concepts/","title":"Key Concepts for End Users","text":"<ul> <li>Normal usage of the Groceries app involves a backend running on a server with access to a CouchDB database. This is used to sync across devices and between shared users.</li> <li>You must register with this server, and create a username and password. Once you login to each device, you should not have to sign in again unless the app goes unused for 30 days.</li> <li>List Groups - Every user has a default list group created automatically, and every list is assigned to one (and only one) list group. Lists, items, categories, and units of measure are all tied to the list group where they are assigned (except for the global items, categories, and units of measure that come with the application).</li> <li>Lists are equivalent to a grocery store, and always exist within a given list group (which cannot be changed once created). Lists (stores) also have a given set of categories (aisles) that are active within the list. For instance, you might have a produce category/aisle at your grocery store, but not in your hardware store.  The sequence of categories/aisles is associated with the list as well, and can be changed to match the physical layout of each store/list.</li> <li>Items are individual things on a shopping list, and are associated with a list group. When you are on the Items page, you can choose whether to add items just to a given list, or to add them to all available lists in the listgroup if a group is selected.</li> <li>The application ships with a set of about 250 items and 30 categories. You can add these to the lists or create new items as you go.</li> <li>Items are tagged to categories to aid in sorting the list. You can edit and add new categories as well.</li> <li>Items also have a \"unit of measure\" like bag, box, gallon, pound, etc. You can add new units of measure as well.</li> <li>List Groups can be shared with friends. You can send a friend request to users not already registered on the app, and they will get an email asking them to sign up. Once the friendship is confirmed by the other user, you can share a list group with them. All lists within the list group are then shared.</li> <li>Recipes are groups of items as well as instructions for preparation. Each item can have set quantities and units of measure for both the recipe as well as for shopping. Recipe items can be added to a list for shopping \"en-masse\", including the ability to easily skip certain items.</li> </ul>"},{"location":"userguide/lists/","title":"Lists / List Groups","text":""},{"location":"userguide/lists/#list-editor","title":"List Editor","text":"<p>Within the list editor, you can change the name of the list.  The other key ability here is to re-arrange the categories within the list to represent the physical order that they appear in the store.  This allows the previously shown item screen to be shown in a logical order easy for shopping.  You can re-arrange the items by dragging on the right hand icon and dragging into the new position.</p> <p>You can also click on the checkbox of the category and move it from the active list to the inactive. You would do this, for example, if the Publix doesn't have an Alcohol section. This works in conjunction with the Setting (shown later) \"Add with Same Categories Automatically\".</p> <p>When you first create a list, you can assign it to a list group. After that point it cannot be changed and moved to another list group. </p>"},{"location":"userguide/lists/#list-group-editor","title":"List Group Editor","text":"<p>In the list group editor, you can change the name of the list group. You likely want to change the name of the default list group that the application creates for you, which would not be very meaningful.</p> <p>Remember that list groups are also the way that custom lists, items, categories and units of measure are stored. For instance, if you create a custom category \"Electrical\" in your \"Hardware Stores\" list group, that category will not exist in your \"Grocery Stores\" list group unless you create it there as well.</p> <p>The key thing you can do in this screen is also share the list group with your existing friends (See Friend Editor for more detail).  </p> <p>Here, if you are the list group owner, you can select those friends you want to share the list group with. This would be common in a multi-family household so everyone can participate in adding items to the same shared shopping list and also being able to shop or check items off. </p> <p>Note that the sharing is for the whole list group. You can, however, create a different list group with different sharing options. To do this you would go to the manage list groups screen and press </p>"},{"location":"userguide/login/","title":"Login / Logout","text":"<p>This screen will be presented at application startup, and if you haven't yet logged in to the app, you will see a login screen presented asking for the API server URL, user name and password.</p>"},{"location":"userguide/login/#api-server-url","title":"API Server URL","text":"<p>If your system administrator / installer has configured the web application, it will default to your own locally hosted API server URL and you would not need to change. Similarly, the default URL can be \"baked\" in to the Android application package. If this default shows up as <code>https://groceries.mydomain.com/api</code> then you will definitely need to change it to the URL provided by your system administrator (see installation guide for more details)</p>"},{"location":"userguide/login/#creating-a-new-user","title":"Creating a new user","text":"<p>To create an account you must provide:</p> <ul> <li>Username -- you will use this in the future to login to your account. It cannot be changed once created, and is case-sensitive</li> <li>E-mail address -- this will be used to process forgotten password requests as well as friend requests. To use this, your system administrator must have enabled/configured the ability to send emails.</li> <li>Full Name - your full name -- used primarily for the friend request screen</li> <li>Password - to be used to login to the application. Currently no standards are applied</li> </ul>"},{"location":"userguide/login/#resetting-your-password","title":"Resetting your password","text":"<p>From the main login screen, you can select the \"Forgot Password\" button. This will send you a link to reset the password on the server. If your system administrator has not enabled email functionality, you will need to contact them directly to reset your password.</p>"},{"location":"userguide/login/#logout","title":"Logout","text":"<p>Will log you out of the app and remove credentials, so you will need to provide user name and password to login again.</p>"},{"location":"userguide/login/#work-offline","title":"Work Offline","text":"<p>Under certain circumstances, such as when connectivity is lost with the application or database server, then you may be asked if you want to work offline. Once selected, the sync icon in the upper right hand corner will change to offline mode. Once you regain connectivity, you can click the login button again and you will be reconnected automatically.</p>"},{"location":"userguide/managedata/","title":"Manage Data","text":"<p>The manage data page allows you to access important data maintenance screens for the application. These include:</p> <ul> <li>Manage All Listgroups -- Shows all of your persondal list groups and allows them to be changed, deleted, or for you to add a new listgroup.</li> <li>Create New List -- Allows you to add a new list to a list group, and set which categories/aisles are in that list, and in which order.</li> <li>Manage Categories -- Shows all personal and global categories and allows changing colors to be displayed in the item checkoff screen.</li> <li>Manage All Items -- Allows editing of all items that you have added to a list group/list (either from the global list or your own custom new item). </li> <li>View Global Items -- View a list of the global / built-in items that come with the application. No changes can be made to these items.</li> <li>Units of Measure -- Allows you to change global units of measure (adding alternate unit of measure abbreviations) and add/change any custom units of measure you create as well.</li> </ul>"},{"location":"userguide/menu/","title":"Menu","text":"<p>The menu shows first the lists and list groups available to the user. In this case, there is list group \"Grocery Stores\", with 2 lists - Publix and Wegman's. There is also a list group called \"Hardware Stores\" with 2 lists - Home Depot and Lowes.  If you click on the name of the list or list group itself, you will be taken to the item entry/checkoff screen. If you click to the right on the pencil, you will be taken to the list or list group editor screen.</p> <p>Other items on the menu include options to create a new list, show/edit the list groups, show/edit recipes (including importing new ones and adding them in bulk to a list), show/edit the categories, show/edit the items (across all lists), show the global items (the ones which come pre-populated with the app) and show/edit the units of measure. Also, you can show/add friends,  view the sync \"conflict\" log in the rare occurence that conflicts arise, and show/change the app settings. You can also login / logout from the app.</p>"},{"location":"userguide/recipes/","title":"Recipe Editor","text":""},{"location":"userguide/recipes/#recipes","title":"Recipes","text":"<p>In this app, a recipe is a collection of items and a set of preparation steps.  Each item can either be one of the global items that come with the app, or a custom one for the recipe. Every item has a separate \"recipe\" and \"shopping\" unit of measure and quantity. For instance, you might need 2 cups of sugar for the recipe, but you wouldn't buy 2 cups of sugar, but perhaps 1 pound.</p>"},{"location":"userguide/recipes/#general-approach","title":"General Approach","text":"<p>Every user of the application will have a special list group created for recipes. The default name until you change it is \"username (recipes)\". </p> <p>Like the other list groups, the name can be edited and you can share the list with other app users once you have a confirmed \"friend\" relationship in the application.</p> <p>Unlike the other list groups, you can't \"shop\" from the recipes list. Instead, you add the items on a given recipe to one of the other shopping lists or list groups.</p>"},{"location":"userguide/recipes/#recipe-import","title":"Recipe Import","text":"<p>On the Recipes list screen, you can also import a recipe from the Tandoor app. To do so, you would go to the Tandoor app, then export either 1 or a set of recipes -- this would create a .zip file, either on your computer or mobile device. In the recipe import screen, you could then select the .zip file and it would process the available recipes, and import those selected.</p> <p></p> <p>During recipe import, if a match cannot be made for unit of measure or other problems occurred, then a note will be added to the individual erroring item.</p>"},{"location":"userguide/recipes/#recipe-editor_1","title":"Recipe Editor","text":"<p>Here is where you can edit/add/delete items for the recipe on the editor screen. You can search existing items on other recipes or global that can easily be added by clicking on the item in the search bar. Once added, you can click the pencil to edit quantities and units of measure for the recipe prep and shopping.</p> <p>You can also just add a series of text boxes that act as instructions / recipe prep steps. Next to each item or recipe step, you can press the trash can to delete the item or instruction step.</p> <p>At the bottom of the screen, you can choose a list or listgroup that you want to add the items to in bulk.  Only those items with a checkmark in the \"Add\" box will be added to the list. The item will be added to that list if it isn't already on the list. The quantity and unit of measure used will be based on those that are in the \"Shopping\" quantity and unit of measure for the item rather than the recipe quantity and unit of measure. </p>"},{"location":"userguide/settings/","title":"Settings","text":"<p>The settings control how portions of the application work.</p> <p>There are 3 different options that are centered around how items are added to lists with relation to other lists in the same list group (Add To Other List Options):</p> <ul> <li>Add in Same Group automatically -- When selected, if you have Wegman's and Publix in your Grocery Store list group, and you add Apples to the Wegman's list, they will automatically be added to the Publix list as well. The only exception to this would be if the item wasn't stocked at the the other stores on the list (as shown on the item editor screen).  This is the default setting. This is also the automatic behavior when you have selected the list group level (\"Grocery Stores\") on the Item List entry/ check off screen.</li> <li>Add with same categories automatically -- This is similar to the first, but it will only add to the other lists if that store has the same category of items. For instance, if you say that Publix doesn't have an Alcohol section but Wegman's does, if you add beer on to the Wegman's list, it will not automatically be entered on the Publix list.</li> <li>Do not add automatically -- Items are only added to the selected list. If a list group is selected, it will still automatically add it to all stores in the list group.</li> </ul> <p>Other Settings:</p> <ul> <li>Theme - The application can either use the default system theme, or be forced to dark or light mode here.</li> <li>Language -- The application has translations provided for the application screens and provided global items, categories, and units of measure. English, Spanish, and German are currently available. The language should automatically be detected based on browser and other system settings, but can be over-ridden here as well.</li> <li>Remove items from list group when marked as purchased -- If you are shopping on the Wegman's list, and you check off the apples from the list, with this setting turned on it will also automatically check the apples off the Wegman's list as well. This makes it easy if you are going to maybe 2 grocery stores and want to shop for things at either store. This is convenient if you have for instance a store like Sam's Club or Costco and might be able to buy several things from your grocery list, but still need to go to the Wegman's to pick up your remaining items.</li> <li>Delete from all lists in group when deleting completed items -- When you press the \"delete completed items\" button, this will remove the items from all other stores in the list group as well. This is convenient in the above scenario as well as you don't need to delete the completed items off of multiple stores in the list group.</li> <li>Include Global Items in Search -- for some use cases, the provided global set of items might not be useful, so you can exclude these items from search if desired.</li> <li>Days of Conflict Log to view -- in the rare event of a conflict, you will see a triangle warning indicator in the upper right hand corner of the screen next to the cloud/sync indicator. If you click this icon or choose \"Conflict Log\" from the menu item, you will only be shown conflicts from the selected number of days in the past. If conflicts do occur you can view them in the conflict log and see which was the \"winning\" and \"losing\" document, so you can make additional changes or coordinate with family members as required. Once you have viewed the conflict log, you can also \"Set as Viewed\" on the conflict log screen so you will not see those items again.</li> </ul>"},{"location":"userguide/status/","title":"Status","text":"<p>The status page shows you detailed information about the current operating and connectivity status of the applicatio.</p> <p>The application version is shown as well as the database \"schema\" version. This must match up with the schema version that the database server is running. </p> <p>Information is also provided on the status of the connection to the application (API) server as well as the database server. In addition, information is shown about the \"refresh\" token and the \"access\" token. Every time you login to the app with your user name and password you get a refresh token as well as an access token. The access token is used to get security access to the remote database and API server. This will typically expire in a \"short\" amount of time, which defaults to one day. As it gets close to the access token expiration time, the app will request a new access and refresh token as well. The refresh token expires in a longer time period, defaulting to 30 days. In normal usage, as long as you sign in once every 30 days, then, you will not need to re-provide the user name and password, but will login automatically using the tokens.  This portion of the setting screen shows when these tokens will be refreshed and their current status.</p> <p>If things need to be \"reset\", you can click the \"Delete Local Data\" which will remove the locally synced database, and require you to sign in again to start. You will also very occasionally have to do this if a new application update changes the database schema. In this case, you will need to choose this option so your data can be resynchronized from the server, including the latest database updates associated with the new application version.</p> <p>If your sync icon shows a conflict, you can also view the full conflict log from this page by clicking on the \"Conflict Log\" button.</p>"},{"location":"userguide/uom/","title":"Units of Measure","text":"<p>The Units of Measure editor allows you to add/edit your custom units of measure. This includes the following fields:</p> <ul> <li>List Group -- All custom units of measure exist attached to a specific list group.</li> <li>Code (ISO) -- This is just a two letter identifier for the unit of measure. All of the built-in units of measure use the standard ISO codes, so those are already taken, but you can use any other available 2 letter/digit code for your own custom units.</li> <li>Description / Plural Description -- Used when displaying the units on the item list checkoff screen</li> <li>Alternate UOM Abbreviations -- These are primarily used when importing a recipe so that if, for example, the item calls for \"6 tbsps\" it will correctly match it to the tablespoons unit of measure. Some of these already are added for global units of measure, but you can add more alternates as well.</li> </ul> <p>When editing a unit of measure, press the Save button to accept changes or the cancel button to not save. You can also press the Delete button to delete any of your custom units of measure.</p>"},{"location":"userguide/upgrading/","title":"Information about upgrading between releases","text":"<p>Most release upgrades simply involve the system administrator upgrading the backend and website versions, and then the end user upgrading their Android/IOS app appropriately.  For all upgrades, it is recommended to take a backup of the couchDB database before proceeding with the upgrade, so if any issues occur, you can recover easily. See here for backup/recovery instructions.</p> <p>Sometimes, however, there is a more significant change requiring some changes to database or other structures. When these occur (such as upgrading from any prior release to the 1.0.x and beyond series), the user may see a warning like this:</p> <p></p> <p>When this happens, the easiest thing to do is to choose \"Delete/Exit\" and then restart or re-login to the app. This will prompt you for your user ID and password again, and will then re-synchronize the data from the server. This is just a one-time action needed to fully update the data on your local device and prevent conflicts from occurring with new structures.</p> <p>For all upgrades, but particularly those with a schema upgrade, you should ensure that no clients are active when the backend restarts with the new version and performs the schema upgrade.  If you do not do this, you will likely end up with document conflicts created because the client is live. The easiest path forward if this occurs is to simply restore the previous database and then try the upgrade gain, without any clients being active.</p>"},{"location":"userguide/upgrading/#changing-to-release-10x-from-any-prior-release","title":"Changing to release 1.0.x from any prior release","text":"<p>The above documented database delete/resync process applies. In addition, the name of the Android application file (\".apk\") has been changed along with the application name change to \"Specifically Clementines\". You will need to delete any existing copy of the \"groceries\" app as it will no longer work and won't be upgraded appropriately in the future. Please switch to using \"clementines.apk\" as provided with the bundled release.</p> <p>This release, in addition, has a significant change in the schema, so it may take a minute or two to update on the backend.  To avoid problems, all local clients should not be online while the backend is updating, as noted above.</p> <p>The major functional changes with release 0.9.x include: - Any custom / user-created category or unit of measure is now tied to the list group where that category or unit of measure is used, and is only available within that list group.  The upgrade process will try to assign these custom categories and units of measure to the right list group. - Recipes are now tied to a new user-specific recipe list group. Just like standard list groups, they can be shared with other users to share your recipe content. The upgrade process will create the recipes list group. - Linking these items to list groups will in a future release enable decreased unnecessary data synchronization as well as an easier ability to host a single server with a larger number of \"unrelated\" end users with increased performance.</p>"},{"location":"userguide/userinfo/","title":"User Info","text":"<p>The user info page shows you information about the currently logged in user. It also allows you to update the descriptive name and email address associated with the account. This data is used when inviting other friends to list groups and when resetting your password.</p> <p>If the data is changed, you should press the \"Update User Info\" button to save the changes.</p>"}]}